{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\test-app\\\\src\\\\views\\\\Maps.js\",\n    _s = $RefreshSig$();\n\n/*!\n\n=========================================================\n* Now UI Dashboard React - v1.5.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/now-ui-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/now-ui-dashboard-react/blob/main/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n// import React from \"react\";\n// // reactstrap components\nimport { Row, Col, Card, CardHeader, CardBody } from \"reactstrap\"; // // core components\n\nimport PanelHeader from \"components/PanelHeader/PanelHeader.js\";\nimport React, { useEffect } from 'react';\nimport ReactDOM from \"react-dom\"; // import 'bootstrap/dist/css/bootstrap.css';\n// import './css/bootstrap.min.css';\n// import './css/style.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MapWrapper = () => {\n  _s();\n\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.innerHTML = `\n        var map;         \n        function initTmap() \n        {\n            map = new Tmapv2.Map(\"TMapApp\", {\n                center: new Tmapv2.LatLng(33.4000,126.51555),\n                width: \"100%\",\n                height: \"100%\",\n                zoom:12,\n                zoomControl : true,\n\t\t\t\t\t      scrollwheel : true\n            });\n            addMarkerAni(Tmapv2.MarkerOptions.ANIMATE_FADEIN);\n        }\n        \n        var markers = [];\n        \n        // 마커들의 좌표를 저장할 배열입니다.\n        var coords = [new Tmapv2.LatLng(33.4000,126.51555),\n          new Tmapv2.LatLng(33.4000,126.51755),\n          new Tmapv2.LatLng(33.4000,126.51955),\n          new Tmapv2.LatLng(33.4000,126.52255),\n          new Tmapv2.LatLng(33.4000,126.52555),\n        ];\n\n        // 마커를 추가하는 함수입니다.\n        function addMarkerAni(aniType) {\n          var coordIdx = 0;\n                \n          removeMarkers(); // 지도에 새로 등록하기 위해 모든 마커를 지우는 함수입니다.\n                \n          var func = function() {\n            //Marker 객체 생성.\n            var marker = new Tmapv2.Marker({\n              position: coords[coordIdx++], //Marker의 중심좌표 설정.\n              draggable: true, //Marker의 드래그 가능 여부.\n              animation: aniType, //Marker 애니메이션.\n              animationLength: 500, //애니메이션 길이.\n              label: '관광지'+(coordIdx-1), //Marker의 라벨.\n              title: '관광지 정보1<br>관광지 정보2<br>관광지 정보3<br>관광지 정보4<br>', //Marker 타이틀.\n              map: map //Marker가 표시될 Map 설정.\n            });\n                  \n            markers.push(marker);\n\n            if (coordIdx < 5) {\n              // 일정 시간 간격으로 마커를 생성하는 함수를 실행합니다\n              setTimeout(func, 300);\n            }\n          }\n          // 일정 시간 간격으로 마커를 생성하는 함수를 실행합니다\n          setTimeout(func, 300);\n        }\n        // 모든 마커를 제거하는 함수입니다.\n        function removeMarkers() {\n          for (var i = 0; i < markers.length; i++) {\n            markers[i].setMap(null);\n          }\n          markers = [];\n        }\n\n        // 3. 경로탐색 API 사용요청\n\t\t\t\t$(\"#btn_select\")\n\t\t\t\t\t\t.click(\n\t\t\t\t\t\t\t\tfunction() {\n\t\t\n\t\t\t\t\t\t\t\t\t//기존 맵에 있던 정보들 초기화\n\t\t\t\t\t\t\t\t\tresettingMap();\n\t\t\n\t\t\t\t\t\t\t\t\tvar searchOption = 0;\n\t\t\n\t\t\t\t\t\t\t\t\tvar trafficInfochk = $(\"#year\").val();\n\t\t\n\t\t\t\t\t\t\t\t\t//JSON TYPE EDIT [S]\n\t\t\t\t\t\t\t\t\t$\n\t\t\t\t\t\t\t\t\t\t\t.ajax({\n\t\t\t\t\t\t\t\t\t\t\t\ttype : \"POST\",\n\t\t\t\t\t\t\t\t\t\t\t\turl : \"https://apis.openapi.sk.com/tmap/routes?version=1&format=json&callback=result\",\n\t\t\t\t\t\t\t\t\t\t\t\tasync : false,\n\t\t\t\t\t\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"appKey\" : \"발급AppKey\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"startX\" : \"126.9850380932383\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"startY\" : \"37.566567545861645\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"endX\" : \"127.10331814639885\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"endY\" : \"37.403049076341794\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"reqCoordType\" : \"WGS84GEO\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"resCoordType\" : \"EPSG3857\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"searchOption\" : searchOption,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"trafficInfo\" : trafficInfochk\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess : function(response) {\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar resultData = response.features;\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar tDistance = \"총 거리 : \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (resultData[0].properties.totalDistance / 1000)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toFixed(1) + \"km,\";\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar tTime = \" 총 시간 : \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (resultData[0].properties.totalTime / 60)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toFixed(0) + \"분,\";\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar tFare = \" 총 요금 : \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ resultData[0].properties.totalFare\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"원,\";\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar taxiFare = \" 예상 택시 요금 : \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ resultData[0].properties.taxiFare\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"원\";\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t$(\"#result\").text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttDistance + tTime + tFare\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ taxiFare);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t//교통정보 표출 옵션값을 체크\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (trafficInfochk == \"Y\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( var i in resultData) { //for문 [S]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar geometry = resultData[i].geometry;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar properties = resultData[i].properties;\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//교통 정보도 담음\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchktraffic\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.push(geometry.traffic);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar sectionInfos = [];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar trafficArr = geometry.traffic;\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( var j in geometry.coordinates) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar latlng = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[j][0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[j][1]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 변환\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlatlng);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsectionInfos\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.push(convertPoint);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdrawLine(sectionInfos,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrafficArr);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar markerImg = \"\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pType = \"\";\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (properties.pointType == \"S\") { //출발지 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"S\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (properties.pointType == \"E\") { //도착지 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"E\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else { //각 포인트 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"P\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar latlon = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[1]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 다시 변환\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlatlon);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar routeInfoObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImage : markerImg,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlng : convertPoint._lng,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat : convertPoint._lat,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpointType : pType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 마커 추가\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taddMarkers(routeInfoObj);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}//for문 [E]\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( var i in resultData) { //for문 [S]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar geometry = resultData[i].geometry;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar properties = resultData[i].properties;\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( var j in geometry.coordinates) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar latlng = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[j][0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[j][1]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 변환\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlatlng);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트객체의 정보로 좌표값 변환 객체로 저장\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertChange = new Tmapv2.LatLng(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconvertPoint._lat,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconvertPoint._lng);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 배열에 담기\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdrawInfoArr\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.push(convertChange);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdrawLine(drawInfoArr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"0\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar markerImg = \"\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pType = \"\";\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (properties.pointType == \"S\") { //출발지 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"S\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (properties.pointType == \"E\") { //도착지 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"E\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else { //각 포인트 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"P\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar latlon = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[1]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 다시 변환\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlatlon);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar routeInfoObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImage : markerImg,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlng : convertPoint._lng,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat : convertPoint._lat,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpointType : pType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Marker 추가\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taddMarkers(routeInfoObj);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}//for문 [E]\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\terror : function(request, status, error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"code:\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ request.status + \"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"message:\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ request.responseText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"\\n\" + \"error:\" + error);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t//JSON TYPE EDIT [E]\n\t\t\t\t\t\t\t\t});\n\t\t\t}\n\t\t\n\t\t\tfunction addComma(num) {\n\t\t\t\tvar regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\t\t\t\treturn num.toString().replace(regexp, ',');\n\t\t\t}\n\n\n      //라인그리기\n\t\t\tfunction drawLine(arrPoint, traffic) {\n\t\t\t\tvar polyline_;\n\t\t\n\t\t\t\tif (chktraffic.length != 0) {\n\t\t\n\t\t\t\t\t// 교통정보 혼잡도를 체크\n\t\t\t\t\t// strokeColor는 교통 정보상황에 다라서 변화\n\t\t\t\t\t// traffic :  0-정보없음, 1-원활, 2-서행, 3-지체, 4-정체  (black, green, yellow, orange, red)\n\t\t\n\t\t\t\t\tvar lineColor = \"\";\n\t\t\n\t\t\t\t\tif (traffic != \"0\") {\n\t\t\t\t\t\tif (traffic.length == 0) { //length가 0인것은 교통정보가 없으므로 검은색으로 표시\n\t\t\n\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\tpath : arrPoint,\n\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t} else { //교통정보가 있음\n\t\t\n\t\t\t\t\t\t\tif (traffic[0][0] != 0) { //교통정보 시작인덱스가 0이 아닌경우\n\t\t\t\t\t\t\t\tvar trafficObject = \"\";\n\t\t\t\t\t\t\t\tvar tInfo = [];\n\t\t\n\t\t\t\t\t\t\t\tfor (var z = 0; z < traffic.length; z++) {\n\t\t\t\t\t\t\t\t\ttrafficObject = {\n\t\t\t\t\t\t\t\t\t\t\"startIndex\" : traffic[z][0],\n\t\t\t\t\t\t\t\t\t\t\"endIndex\" : traffic[z][1],\n\t\t\t\t\t\t\t\t\t\t\"trafficIndex\" : traffic[z][2],\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\ttInfo.push(trafficObject)\n\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\tvar noInfomationPoint = [];\n\t\t\n\t\t\t\t\t\t\t\tfor (var p = 0; p < tInfo[0].startIndex; p++) {\n\t\t\t\t\t\t\t\t\tnoInfomationPoint.push(arrPoint[p]);\n\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\tpath : noInfomationPoint,\n\t\t\t\t\t\t\t\t\tstrokeColor : \"#06050D\",\n\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\n\t\t\t\t\t\t\t\tfor (var x = 0; x < tInfo.length; x++) {\n\t\t\t\t\t\t\t\t\tvar sectionPoint = []; //구간선언\n\t\t\n\t\t\t\t\t\t\t\t\tfor (var y = tInfo[x].startIndex; y <= tInfo[x].endIndex; y++) {\n\t\t\t\t\t\t\t\t\t\tsectionPoint.push(arrPoint[y]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\tif (tInfo[x].trafficIndex == 0) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 1) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#61AB25\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 2) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#FFFF00\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 3) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#E87506\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 4) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#D61125\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\tpath : sectionPoint,\n\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else { //0부터 시작하는 경우\n\t\t\n\t\t\t\t\t\t\t\tvar trafficObject = \"\";\n\t\t\t\t\t\t\t\tvar tInfo = [];\n\t\t\n\t\t\t\t\t\t\t\tfor (var z = 0; z < traffic.length; z++) {\n\t\t\t\t\t\t\t\t\ttrafficObject = {\n\t\t\t\t\t\t\t\t\t\t\"startIndex\" : traffic[z][0],\n\t\t\t\t\t\t\t\t\t\t\"endIndex\" : traffic[z][1],\n\t\t\t\t\t\t\t\t\t\t\"trafficIndex\" : traffic[z][2],\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\ttInfo.push(trafficObject)\n\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\tfor (var x = 0; x < tInfo.length; x++) {\n\t\t\t\t\t\t\t\t\tvar sectionPoint = []; //구간선언\n\t\t\n\t\t\t\t\t\t\t\t\tfor (var y = tInfo[x].startIndex; y <= tInfo[x].endIndex; y++) {\n\t\t\t\t\t\t\t\t\t\tsectionPoint.push(arrPoint[y]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\tif (tInfo[x].trafficIndex == 0) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 1) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#61AB25\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 2) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#FFFF00\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 3) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#E87506\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 4) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#D61125\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\tpath : sectionPoint,\n\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\tpath : arrPoint,\n\t\t\t\t\t\tstrokeColor : \"#DD0000\",\n\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\tmap : map\n\t\t\t\t\t});\n\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t}\n\t\t\n\t\t\t}\n\t\t\n\t\t\t//초기화 기능\n\t\t\tfunction resettingMap() {\n\t\t\t\t//기존마커는 삭제\n\t\t\t\tmarker_s.setMap(null);\n\t\t\t\tmarker_e.setMap(null);\n\t\t\n\t\t\t\tif (resultMarkerArr.length > 0) {\n\t\t\t\t\tfor (var i = 0; i < resultMarkerArr.length; i++) {\n\t\t\t\t\t\tresultMarkerArr[i].setMap(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (resultdrawArr.length > 0) {\n\t\t\t\t\tfor (var i = 0; i < resultdrawArr.length; i++) {\n\t\t\t\t\t\tresultdrawArr[i].setMap(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tchktraffic = [];\n\t\t\t\tdrawInfoArr = [];\n\t\t\t\tresultMarkerArr = [];\n\t\t\t\tresultdrawArr = [];\n\t\t\t}\n\n\n      initTmap();\n   `;\n    script.type = \"text/javascript\";\n    script.async = \"async\";\n    document.head.appendChild(script);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"TMapApp\",\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      position: \"fixed\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapWrapper, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MapWrapper;\n\nfunction FullScreenMap() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PanelHeader, {\n      size: \"sm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"map\",\n            className: \"map\",\n            style: {\n              position: \"relative\",\n              overflow: \"hidden\"\n            },\n            children: /*#__PURE__*/_jsxDEV(MapWrapper, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c2 = FullScreenMap;\nexport default FullScreenMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapWrapper\");\n$RefreshReg$(_c2, \"FullScreenMap\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/test-app/src/views/Maps.js"],"names":["Row","Col","Card","CardHeader","CardBody","PanelHeader","React","useEffect","ReactDOM","MapWrapper","script","document","createElement","innerHTML","type","async","head","appendChild","height","width","position","FullScreenMap","overflow"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCC,QAArC,QAAqD,YAArD,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;AACA;;;;;AAEA,MAAMC,UAAU,GAAG,MACnB;AAAA;;AACEF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMG,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,IAAAA,MAAM,CAACG,SAAP,GAAoB;AACxzaI;AA0aAH,IAAAA,MAAM,CAACI,IAAP,GAAc,iBAAd;AACAJ,IAAAA,MAAM,CAACK,KAAP,GAAe,OAAf;AACAJ,IAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd,CAA0BP,MAA1B;AACD,GA/aQ,EA+aN,EA/aM,CAAT;AAgbA,sBACE;AACA,IAAA,EAAE,EAAC,SADH;AAEA,IAAA,KAAK,EAAE;AACLQ,MAAAA,MAAM,EAAE,MADH;AAELC,MAAAA,KAAK,EAAE,MAFF;AAGLC,MAAAA,QAAQ,EAAE;AAHL;AAFP;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA5bD;;GAAMX,U;;KAAAA,U;;AA8bN,SAASY,aAAT,GAAyB;AACvB,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACM,QAAC,IAAD;AAAA,+BACE,QAAC,QAAD;AAAA,iCACE;AACE,YAAA,EAAE,EAAC,KADL;AAEE,YAAA,SAAS,EAAC,KAFZ;AAGE,YAAA,KAAK,EAAE;AAAED,cAAAA,QAAQ,EAAE,UAAZ;AAAwBE,cAAAA,QAAQ,EAAE;AAAlC,aAHT;AAAA,mCAKA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAkBD;;MAnBQD,a;AAqBT,eAAeA,aAAf","sourcesContent":["/*!\n\n=========================================================\n* Now UI Dashboard React - v1.5.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/now-ui-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/now-ui-dashboard-react/blob/main/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n// import React from \"react\";\n\n// // reactstrap components\nimport { Row, Col, Card, CardHeader, CardBody } from \"reactstrap\";\n\n// // core components\nimport PanelHeader from \"components/PanelHeader/PanelHeader.js\";\n\nimport React, { useEffect } from 'react';\nimport ReactDOM from \"react-dom\";\n// import 'bootstrap/dist/css/bootstrap.css';\n// import './css/bootstrap.min.css';\n// import './css/style.css';\n\nconst MapWrapper = () => \n{\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.innerHTML = `\n        var map;         \n        function initTmap() \n        {\n            map = new Tmapv2.Map(\"TMapApp\", {\n                center: new Tmapv2.LatLng(33.4000,126.51555),\n                width: \"100%\",\n                height: \"100%\",\n                zoom:12,\n                zoomControl : true,\n\t\t\t\t\t      scrollwheel : true\n            });\n            addMarkerAni(Tmapv2.MarkerOptions.ANIMATE_FADEIN);\n        }\n        \n        var markers = [];\n        \n        // 마커들의 좌표를 저장할 배열입니다.\n        var coords = [new Tmapv2.LatLng(33.4000,126.51555),\n          new Tmapv2.LatLng(33.4000,126.51755),\n          new Tmapv2.LatLng(33.4000,126.51955),\n          new Tmapv2.LatLng(33.4000,126.52255),\n          new Tmapv2.LatLng(33.4000,126.52555),\n        ];\n\n        // 마커를 추가하는 함수입니다.\n        function addMarkerAni(aniType) {\n          var coordIdx = 0;\n                \n          removeMarkers(); // 지도에 새로 등록하기 위해 모든 마커를 지우는 함수입니다.\n                \n          var func = function() {\n            //Marker 객체 생성.\n            var marker = new Tmapv2.Marker({\n              position: coords[coordIdx++], //Marker의 중심좌표 설정.\n              draggable: true, //Marker의 드래그 가능 여부.\n              animation: aniType, //Marker 애니메이션.\n              animationLength: 500, //애니메이션 길이.\n              label: '관광지'+(coordIdx-1), //Marker의 라벨.\n              title: '관광지 정보1<br>관광지 정보2<br>관광지 정보3<br>관광지 정보4<br>', //Marker 타이틀.\n              map: map //Marker가 표시될 Map 설정.\n            });\n                  \n            markers.push(marker);\n\n            if (coordIdx < 5) {\n              // 일정 시간 간격으로 마커를 생성하는 함수를 실행합니다\n              setTimeout(func, 300);\n            }\n          }\n          // 일정 시간 간격으로 마커를 생성하는 함수를 실행합니다\n          setTimeout(func, 300);\n        }\n        // 모든 마커를 제거하는 함수입니다.\n        function removeMarkers() {\n          for (var i = 0; i < markers.length; i++) {\n            markers[i].setMap(null);\n          }\n          markers = [];\n        }\n\n        // 3. 경로탐색 API 사용요청\n\t\t\t\t$(\"#btn_select\")\n\t\t\t\t\t\t.click(\n\t\t\t\t\t\t\t\tfunction() {\n\t\t\n\t\t\t\t\t\t\t\t\t//기존 맵에 있던 정보들 초기화\n\t\t\t\t\t\t\t\t\tresettingMap();\n\t\t\n\t\t\t\t\t\t\t\t\tvar searchOption = 0;\n\t\t\n\t\t\t\t\t\t\t\t\tvar trafficInfochk = $(\"#year\").val();\n\t\t\n\t\t\t\t\t\t\t\t\t//JSON TYPE EDIT [S]\n\t\t\t\t\t\t\t\t\t$\n\t\t\t\t\t\t\t\t\t\t\t.ajax({\n\t\t\t\t\t\t\t\t\t\t\t\ttype : \"POST\",\n\t\t\t\t\t\t\t\t\t\t\t\turl : \"https://apis.openapi.sk.com/tmap/routes?version=1&format=json&callback=result\",\n\t\t\t\t\t\t\t\t\t\t\t\tasync : false,\n\t\t\t\t\t\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"appKey\" : \"발급AppKey\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"startX\" : \"126.9850380932383\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"startY\" : \"37.566567545861645\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"endX\" : \"127.10331814639885\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"endY\" : \"37.403049076341794\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"reqCoordType\" : \"WGS84GEO\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"resCoordType\" : \"EPSG3857\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"searchOption\" : searchOption,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"trafficInfo\" : trafficInfochk\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess : function(response) {\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar resultData = response.features;\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar tDistance = \"총 거리 : \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (resultData[0].properties.totalDistance / 1000)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toFixed(1) + \"km,\";\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar tTime = \" 총 시간 : \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ (resultData[0].properties.totalTime / 60)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toFixed(0) + \"분,\";\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar tFare = \" 총 요금 : \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ resultData[0].properties.totalFare\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"원,\";\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar taxiFare = \" 예상 택시 요금 : \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ resultData[0].properties.taxiFare\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"원\";\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t$(\"#result\").text(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttDistance + tTime + tFare\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ taxiFare);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t//교통정보 표출 옵션값을 체크\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (trafficInfochk == \"Y\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( var i in resultData) { //for문 [S]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar geometry = resultData[i].geometry;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar properties = resultData[i].properties;\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//교통 정보도 담음\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchktraffic\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.push(geometry.traffic);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar sectionInfos = [];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar trafficArr = geometry.traffic;\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( var j in geometry.coordinates) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar latlng = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[j][0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[j][1]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 변환\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlatlng);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsectionInfos\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.push(convertPoint);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdrawLine(sectionInfos,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrafficArr);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar markerImg = \"\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pType = \"\";\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (properties.pointType == \"S\") { //출발지 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"S\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (properties.pointType == \"E\") { //도착지 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"E\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else { //각 포인트 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"P\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar latlon = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[1]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 다시 변환\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlatlon);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar routeInfoObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImage : markerImg,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlng : convertPoint._lng,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat : convertPoint._lat,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpointType : pType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 마커 추가\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taddMarkers(routeInfoObj);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}//for문 [E]\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( var i in resultData) { //for문 [S]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar geometry = resultData[i].geometry;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar properties = resultData[i].properties;\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( var j in geometry.coordinates) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar latlng = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[j][0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[j][1]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 변환\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlatlng);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트객체의 정보로 좌표값 변환 객체로 저장\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertChange = new Tmapv2.LatLng(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconvertPoint._lat,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconvertPoint._lng);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 배열에 담기\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdrawInfoArr\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.push(convertChange);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdrawLine(drawInfoArr,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"0\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar markerImg = \"\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar pType = \"\";\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (properties.pointType == \"S\") { //출발지 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"S\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else if (properties.pointType == \"E\") { //도착지 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"E\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else { //각 포인트 마커\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpType = \"P\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 경로들의 결과값들을 포인트 객체로 변환 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar latlon = new Tmapv2.Point(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeometry.coordinates[1]);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 포인트 객체를 받아 좌표값으로 다시 변환\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlatlon);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar routeInfoObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkerImage : markerImg,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlng : convertPoint._lng,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlat : convertPoint._lat,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpointType : pType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Marker 추가\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taddMarkers(routeInfoObj);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}//for문 [E]\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\terror : function(request, status, error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"code:\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ request.status + \"\\n\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"message:\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ request.responseText\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"\\n\" + \"error:\" + error);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t//JSON TYPE EDIT [E]\n\t\t\t\t\t\t\t\t});\n\t\t\t}\n\t\t\n\t\t\tfunction addComma(num) {\n\t\t\t\tvar regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\t\t\t\treturn num.toString().replace(regexp, ',');\n\t\t\t}\n\n\n      //라인그리기\n\t\t\tfunction drawLine(arrPoint, traffic) {\n\t\t\t\tvar polyline_;\n\t\t\n\t\t\t\tif (chktraffic.length != 0) {\n\t\t\n\t\t\t\t\t// 교통정보 혼잡도를 체크\n\t\t\t\t\t// strokeColor는 교통 정보상황에 다라서 변화\n\t\t\t\t\t// traffic :  0-정보없음, 1-원활, 2-서행, 3-지체, 4-정체  (black, green, yellow, orange, red)\n\t\t\n\t\t\t\t\tvar lineColor = \"\";\n\t\t\n\t\t\t\t\tif (traffic != \"0\") {\n\t\t\t\t\t\tif (traffic.length == 0) { //length가 0인것은 교통정보가 없으므로 검은색으로 표시\n\t\t\n\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\tpath : arrPoint,\n\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t} else { //교통정보가 있음\n\t\t\n\t\t\t\t\t\t\tif (traffic[0][0] != 0) { //교통정보 시작인덱스가 0이 아닌경우\n\t\t\t\t\t\t\t\tvar trafficObject = \"\";\n\t\t\t\t\t\t\t\tvar tInfo = [];\n\t\t\n\t\t\t\t\t\t\t\tfor (var z = 0; z < traffic.length; z++) {\n\t\t\t\t\t\t\t\t\ttrafficObject = {\n\t\t\t\t\t\t\t\t\t\t\"startIndex\" : traffic[z][0],\n\t\t\t\t\t\t\t\t\t\t\"endIndex\" : traffic[z][1],\n\t\t\t\t\t\t\t\t\t\t\"trafficIndex\" : traffic[z][2],\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\ttInfo.push(trafficObject)\n\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\tvar noInfomationPoint = [];\n\t\t\n\t\t\t\t\t\t\t\tfor (var p = 0; p < tInfo[0].startIndex; p++) {\n\t\t\t\t\t\t\t\t\tnoInfomationPoint.push(arrPoint[p]);\n\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\tpath : noInfomationPoint,\n\t\t\t\t\t\t\t\t\tstrokeColor : \"#06050D\",\n\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\n\t\t\t\t\t\t\t\tfor (var x = 0; x < tInfo.length; x++) {\n\t\t\t\t\t\t\t\t\tvar sectionPoint = []; //구간선언\n\t\t\n\t\t\t\t\t\t\t\t\tfor (var y = tInfo[x].startIndex; y <= tInfo[x].endIndex; y++) {\n\t\t\t\t\t\t\t\t\t\tsectionPoint.push(arrPoint[y]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\tif (tInfo[x].trafficIndex == 0) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 1) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#61AB25\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 2) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#FFFF00\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 3) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#E87506\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 4) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#D61125\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\tpath : sectionPoint,\n\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else { //0부터 시작하는 경우\n\t\t\n\t\t\t\t\t\t\t\tvar trafficObject = \"\";\n\t\t\t\t\t\t\t\tvar tInfo = [];\n\t\t\n\t\t\t\t\t\t\t\tfor (var z = 0; z < traffic.length; z++) {\n\t\t\t\t\t\t\t\t\ttrafficObject = {\n\t\t\t\t\t\t\t\t\t\t\"startIndex\" : traffic[z][0],\n\t\t\t\t\t\t\t\t\t\t\"endIndex\" : traffic[z][1],\n\t\t\t\t\t\t\t\t\t\t\"trafficIndex\" : traffic[z][2],\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\ttInfo.push(trafficObject)\n\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\tfor (var x = 0; x < tInfo.length; x++) {\n\t\t\t\t\t\t\t\t\tvar sectionPoint = []; //구간선언\n\t\t\n\t\t\t\t\t\t\t\t\tfor (var y = tInfo[x].startIndex; y <= tInfo[x].endIndex; y++) {\n\t\t\t\t\t\t\t\t\t\tsectionPoint.push(arrPoint[y]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\tif (tInfo[x].trafficIndex == 0) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#06050D\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 1) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#61AB25\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 2) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#FFFF00\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 3) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#E87506\";\n\t\t\t\t\t\t\t\t\t} else if (tInfo[x].trafficIndex == 4) {\n\t\t\t\t\t\t\t\t\t\tlineColor = \"#D61125\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t//라인그리기[S]\n\t\t\t\t\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\t\t\t\t\tpath : sectionPoint,\n\t\t\t\t\t\t\t\t\t\tstrokeColor : lineColor,\n\t\t\t\t\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\t\t\t\t\tmap : map\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t//라인그리기[E]\n\t\t\t\t\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpolyline_ = new Tmapv2.Polyline({\n\t\t\t\t\t\tpath : arrPoint,\n\t\t\t\t\t\tstrokeColor : \"#DD0000\",\n\t\t\t\t\t\tstrokeWeight : 6,\n\t\t\t\t\t\tmap : map\n\t\t\t\t\t});\n\t\t\t\t\tresultdrawArr.push(polyline_);\n\t\t\t\t}\n\t\t\n\t\t\t}\n\t\t\n\t\t\t//초기화 기능\n\t\t\tfunction resettingMap() {\n\t\t\t\t//기존마커는 삭제\n\t\t\t\tmarker_s.setMap(null);\n\t\t\t\tmarker_e.setMap(null);\n\t\t\n\t\t\t\tif (resultMarkerArr.length > 0) {\n\t\t\t\t\tfor (var i = 0; i < resultMarkerArr.length; i++) {\n\t\t\t\t\t\tresultMarkerArr[i].setMap(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (resultdrawArr.length > 0) {\n\t\t\t\t\tfor (var i = 0; i < resultdrawArr.length; i++) {\n\t\t\t\t\t\tresultdrawArr[i].setMap(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tchktraffic = [];\n\t\t\t\tdrawInfoArr = [];\n\t\t\t\tresultMarkerArr = [];\n\t\t\t\tresultdrawArr = [];\n\t\t\t}\n\n\n      initTmap();\n   `;\n    script.type = \"text/javascript\";\n    script.async = \"async\";\n    document.head.appendChild(script);\n  }, []);\n  return (\n    <div\n    id=\"TMapApp\"\n    style={{\n      height: \"100%\",\n      width: \"100%\",\n      position: \"fixed\",\n    }}\n  />\n  );\n}\n\nfunction FullScreenMap() {\n  return (\n    <>\n      <PanelHeader size=\"sm\" />\n      <div className=\"content\">\n            <Card>\n              <CardBody>\n                <div\n                  id=\"map\"\n                  className=\"map\"\n                  style={{ position: \"relative\", overflow: \"hidden\" }}\n                >\n                <MapWrapper />  \n                </div>\n              </CardBody>\n            </Card>\n      </div>\n    </>\n  );\n}\n\nexport default FullScreenMap;"]},"metadata":{},"sourceType":"module"}